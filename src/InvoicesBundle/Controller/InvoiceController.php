<?php

namespace InvoicesBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use InvoicesBundle\Entity\Invoice;
use InvoicesBundle\Form\InvoiceType;
use InvoicesBundle\Entity\InvoiceData;

class InvoiceController extends Controller
{
    /**
     * @Route("/invoice", name="invoice_home")
     */
    public function indexAction()
    {
        return $this->render('@Invoices/Invoice/index.html.twig');
    }
		
	    /**
		     * @Route("/invoice/add_new", name="invoice_new")
	     */
	    public function addNewAction(Request $request)
	    {

				$invoice = new Invoice();

				$invoiceData = $invoice->getInvoiceData();

				$invoice->getinvoicesCollection()->add($invoiceData);

				$form = $this->createForm(InvoiceType::class,$invoice);

				$form->handleRequest($request);


			       if ($form->isSubmitted() && $form->isValid()) {

					   $invoice = $form->getData();

			           $entityManager = $this->getDoctrine()->getManager();
	   		 		   
					   $invoiceData->setId(0);
					   
					   $entityManager->persist($invoice);
			           $entityManager->flush();
			   
					   // verbose me: horrible solution to the problem of not working @ORM\GeneratedValue(strategy="IDENTITY")
					   // for property $id in InvoiceData (am I missing something?):
					   // trying to insert an autogenerated value with the above flush gives error, as the invoiceData id proves 
					   // to be null. so we set a tmp id to 0 and, once the flush has done, we get the invoice id
					   // and update invoiceData entity with this value. I don't like it.  
					    $this->updateInvoiceDataEntryId($invoice->getId());
					    $entityManager->persist($invoiceData);
					    $entityManager->flush();

			           return $this->render('@Invoices/Invoice/index.html.twig',array('inv'=>$invoice));
			       }


		        return $this->render('@Invoices/Invoice/form.html.twig',array('form'=>$form->createView()));
		    }
			
			public function updateInvoiceDataEntryId($invoiceId)
			{
			    $em = $this->getDoctrine()->getManager();
			    $invoiceEntry = $em->getRepository('InvoicesBundle:InvoiceData')->find($invoiceId);

			    if (!$invoiceEntry) {
			        throw $this->createNotFoundException(
			            'No product found for invoice id '.$invoiceId
			        );
			    }

			    $invoiceEntry->setId($invoiceId);
			    $em->flush();

			    return $this->redirectToRoute('home');
			}
		
		//     /**
		// 	     * @Route("/invoice/add_new", name="invoice_new")
		//      */
		//     public function addNewAction(Request $request)
		//     {
		//
		// $invoice = new Invoice();
		//
		// $form = $this->createForm(InvoiceType::class,$invoice);
		//
		// $form->handleRequest($request);
		//
		//
		// 	       if ($form->isSubmitted() && $form->isValid()) {
		//
		// 	//$form->get('numeroFattura')->setData($form->get('idFattura')->getData());
		//
		// 	$invoice = $form->getData();
		//
		// 	           $entityManager = $this->getDoctrine()->getManager();
		// 	           $entityManager->persist($invoice);
		// 	           $entityManager->flush();
		//
		// 	   $invoiceNumber = $invoice->invoiceNumber;
		//
		// 	           return $this->render('invoiceData_new',array('invoiceNumber'=>$invoiceNumber));
		// 	       }
		//
		//
		//         return $this->render('@Invoices/Invoice/form.html.twig',array('form'=>$form->createView()));
		//     }
	
}