<?php

namespace InvoicesBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use InvoicesBundle\Entity\Invoice;
use InvoicesBundle\Form\InvoiceType;
use InvoicesBundle\Entity\InvoiceData;

class InvoiceController extends Controller
{
    /**
     * @Route("/invoice", name="invoice_home")
     */
    public function indexAction()
    {
        return $this->render('@Invoices/Invoice/index.html.twig');
    }
		
	    /**
		     * @Route("/invoice/add_new/{invoiceEntity}", name="invoice_new")
	     */
	    public function addNewAction(Request $request, $invoiceEntity=null)
	    {

				$invoice = new Invoice();

				$form = $this->createForm(InvoiceType::class,$invoice);

				$form->handleRequest($request);


			       if ($form->isSubmitted() && $form->isValid()) {

					   $invoice = $form->getData();
					   
					   //operations on properties
					   $invoice->setInvoiceDataId(0);
					   $invoice->setInvoiceDataTotalAmount();

			           $entityManager = $this->getDoctrine()->getManager();
					   $entityManager->persist($invoice);
			           $entityManager->flush();
			   
					   // verbose me: horrible solution to the problem of not working @ORM\GeneratedValue(strategy="IDENTITY")
					   // for property $id in InvoiceData (am I missing something?):
					   // trying to insert the entity with the autogenerated value, the above flush gives error, as the invoiceData id turns out 
					   // to be null. so we set a tmp id to 0 and, once the flush has done, we get the invoice id
					   // and update invoiceData entity with this value. I don't like it.  
					    $insertedInvoiceId = $invoice->getId();
						$this->updateInvoiceDataEntryId($insertedInvoiceId);
						
					    $entityManager->persist($invoice->getInvoiceData());
					    $entityManager->flush();

					   //passed to the view to be dumped
					   $invoiceDbEntry = $this->getDoctrine()
					           ->getRepository(Invoice::class)
					   		   ->find($insertedInvoiceId);
					   
		   			    // if (!$invoiceEntry) {
		   			    //     throw $this->createNotFoundException(
		   			    //         'No product found for invoice id '.$invoiceId
		   			    //     );
		   			    // }
					   if($invoiceDbEntry){
					 	   $invoiceEntity = $invoiceDbEntry;
					   }
			       }
				   
				   
				  //refresh and show the inserted entity
		        return $this->render('@Invoices/Invoice/form.html.twig',array('form'=>$form->createView(),'invoiceEntity'=>$invoiceEntity));
		    }
			
			public function updateInvoiceDataEntryId($invoiceId)
			{
			    $em = $this->getDoctrine()->getManager();
			    $invoiceEntry = $em->getRepository('InvoicesBundle:InvoiceData')->find($invoiceId);

			    if (!$invoiceEntry) {
			        throw $this->createNotFoundException(
			            'No invoice data found for invoice id '.$invoiceId
			        );
			    }

			    $invoiceEntry->setId($invoiceId);
			    $em->flush();

			    return $this->redirectToRoute('home');
			}
			
}
			